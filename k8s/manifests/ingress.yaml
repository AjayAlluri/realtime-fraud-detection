apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fraud-detection-ingress
  namespace: fraud-detection
  labels:
    app: fraud-detection
    component: ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    # CORS settings for web dashboard
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
    # Load balancing
    nginx.ingress.kubernetes.io/upstream-hash-by: "$remote_addr"
    nginx.ingress.kubernetes.io/load-balance: "ip_hash"
spec:
  ingressClassName: nginx
  rules:
  # Flink Web UI
  - host: flink.fraud-detection.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: flink-jobmanager-service
            port:
              number: 8081
  
  # ML Models API
  - host: ml-api.fraud-detection.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: ml-models-service
            port:
              number: 8000
      - path: /docs
        pathType: Prefix
        backend:
          service:
            name: ml-models-service
            port:
              number: 8000
      - path: /openapi.json
        pathType: Prefix
        backend:
          service:
            name: ml-models-service
            port:
              number: 8000
  
  # TensorFlow Serving API
  - host: tf-serving.fraud-detection.local
    http:
      paths:
      - path: /v1/models
        pathType: Prefix
        backend:
          service:
            name: tensorflow-serving-service
            port:
              number: 8501
  
  # Monitoring and metrics endpoints
  - host: metrics.fraud-detection.local
    http:
      paths:
      - path: /flink
        pathType: Prefix
        backend:
          service:
            name: flink-taskmanager-service
            port:
              number: 9249
      - path: /ml-models
        pathType: Prefix
        backend:
          service:
            name: ml-models-service
            port:
              number: 9090
  
  # Health check endpoints
  - host: health.fraud-detection.local
    http:
      paths:
      - path: /ml-models
        pathType: Prefix
        backend:
          service:
            name: ml-models-service
            port:
              number: 8000
      - path: /tensorflow
        pathType: Prefix
        backend:
          service:
            name: tensorflow-serving-service
            port:
              number: 8501
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: fraud-detection-network-policy
  namespace: fraud-detection
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow ingress traffic from ingress controller
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
  # Allow inter-service communication within namespace
  - from:
    - podSelector: {}
  # Allow external access to specific services
  - from: []
    ports:
    - protocol: TCP
      port: 8081  # Flink UI
    - protocol: TCP
      port: 8000  # ML Models API
    - protocol: TCP
      port: 8501  # TensorFlow Serving
  egress:
  # Allow all egress traffic (can be restricted based on requirements)
  - {}
---
apiVersion: v1
kind: Service
metadata:
  name: fraud-detection-gateway
  namespace: fraud-detection
  labels:
    app: fraud-detection-gateway
    component: api-gateway
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8080
    name: http
    nodePort: 30080
  - port: 443
    targetPort: 8443
    name: https
    nodePort: 30443
  selector:
    app: fraud-detection-gateway
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fraud-detection-gateway
  namespace: fraud-detection
  labels:
    app: fraud-detection-gateway
    component: api-gateway
spec:
  replicas: 2
  selector:
    matchLabels:
      app: fraud-detection-gateway
  template:
    metadata:
      labels:
        app: fraud-detection-gateway
    spec:
      containers:
      - name: nginx-gateway
        image: nginx:1.21-alpine
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 8443
          name: https
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d
        - name: nginx-ssl
          mountPath: /etc/nginx/ssl
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-gateway-config
      - name: nginx-ssl
        secret:
          secretName: fraud-detection-tls
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-gateway-config
  namespace: fraud-detection
data:
  default.conf: |
    # Fraud Detection API Gateway Configuration
    
    upstream ml_models_backend {
        least_conn;
        server ml-models-service:8000 max_fails=3 fail_timeout=30s;
    }
    
    upstream tensorflow_backend {
        least_conn;
        server tensorflow-serving-service:8501 max_fails=3 fail_timeout=30s;
    }
    
    upstream flink_backend {
        server flink-jobmanager-service:8081 max_fails=3 fail_timeout=30s;
    }
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=ml_limit:10m rate=100r/s;
    
    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit:10m;
    
    server {
        listen 8080;
        server_name _;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        # Connection and request limits
        limit_conn conn_limit 20;
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # ML Models API
        location /api/v1/predict {
            limit_req zone=ml_limit burst=20 nodelay;
            
            proxy_pass http://ml_models_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            
            # Error handling
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 10s;
        }
        
        # ML Models health and metrics
        location /api/health {
            limit_req zone=api_limit burst=5 nodelay;
            proxy_pass http://ml_models_backend/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
        
        location /api/metrics {
            limit_req zone=api_limit burst=5 nodelay;
            proxy_pass http://ml_models_backend/metrics;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
        
        # TensorFlow Serving API
        location /tensorflow/v1/ {
            limit_req zone=ml_limit burst=50 nodelay;
            
            proxy_pass http://tensorflow_backend/v1/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            proxy_connect_timeout 5s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }
        
        # Flink Web UI
        location /flink/ {
            limit_req zone=api_limit burst=10 nodelay;
            
            proxy_pass http://flink_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # WebSocket support for Flink UI
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
        
        # API documentation
        location /docs {
            limit_req zone=api_limit burst=5 nodelay;
            proxy_pass http://ml_models_backend/docs;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
        
        # Block access to sensitive endpoints
        location ~ ^/(admin|config|internal) {
            deny all;
            return 403;
        }
        
        # Default location
        location / {
            return 404 "Not Found";
        }
    }
  
  ssl.conf: |
    # SSL Configuration (when TLS is enabled)
    
    server {
        listen 8443 ssl http2;
        server_name _;
        
        ssl_certificate /etc/nginx/ssl/tls.crt;
        ssl_certificate_key /etc/nginx/ssl/tls.key;
        
        # SSL Security settings
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        
        # HSTS
        add_header Strict-Transport-Security "max-age=63072000" always;
        
        # Same configuration as HTTP server
        include /etc/nginx/conf.d/default.conf;
    }